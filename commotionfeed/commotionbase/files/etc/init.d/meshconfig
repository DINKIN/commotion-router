#!/bin/sh /etc/rc.common

. /etc/functions.sh
. /lib/functions/meshconfig.sh

DEBUG=echo_eval
START=38
STOP=91
EXTRA_COMMANDS="configure upgrade cron"
EXTRA_HELP=<<EOF
        configure Set mesh configuration defaults.
        upgrade Run remote system upgrades.
EOF

apply_mesh_defaults() {
  local network="$1" 
  local role="$2"

  touch /etc/config/mesh
  cd /etc/meshconfig || return 1
  [ -f "$network/$role" ] || return 2
  mkdir -p /tmp/.uci
  . "./$network/$role"

  $DEBUG uci_set system @system[0] community "$network"
  $DEBUG uci_set system @system[0] role "$role"

  uci_commit
}

apply_wireless_defaults() {
  local n=0
  
  # Clear out any existing wireless interfaces
  $DEBUG uci_load wireless
  while [ "$?" != '1' ]; do
    $DEBUG uci_remove wireless @wifi-iface[]
  done

  config_cb() {
    local type="$1"
    local name="$2"

    case "$type" in
      "interface")
        case "$(uci_get network "$name" proto)" in
          meshif)
            $DEBUG uci_add wireless wifi-iface
            $DEBUG uci_set wireless @wifi-iface[-1] network "$name"
            $DEBUG uci_set wireless @wifi-iface[-1] mode adhoc
            $DEBUG uci_set wireless @wifi-iface[-1] ssid "CommotionSetup-$name"
            ;;
          apif)
            $DEBUG uci_add wireless wifi-iface
            $DEBUG uci_set wireless @wifi-iface[-1] network "$name"
            $DEBUG uci_set wireless @wifi-iface[-1] mode ap
            $DEBUG uci_set wireless @wifi-iface[-1] ssid "CommotionSetup-$name"
            ;;
        esac
      ;;
    esac
  }
  config_load network
  
  reset_cb

  config_cb() {
    local type="$1"
    local name="$2"
    
    case "$type" in
      "wifi-device")
        $DEBUG uci_set wireless "$name" disabled 0
        $DEBUG uci_set wireless @wifi-iface[$n] device "$name"
        n=$(($n+1))
        lastdev="$name"
        ;;
      "wifi-iface")
        [[ -z $(uci_get wireless "$name" device) ]] && \
        $DEBUG uci_set wireless "$name" device "$lastdev"
        ;;
    esac
  }
  config_load wireless

  uci_commit wireless
}

apply_hostname_defaults() {
  local mac=$1
  
  local hostname="$(uci_get mesh @network[0] basename "commotion")-$(uci_get system @system[0] location $(uci_get system @system[0] nodeid))"
   
  echo "$hostname" > /proc/sys/kernel/hostname
  $DEBUG uci_set system @system[0] hostname "$hostname"
  $DEBUG uci_commit system
}

apply_analytics_defaults() {
  [ -f /usr/lib/collectd/network.so ] || logger -t meshconfig "Collectd network plugin not installed!" 
  local host=$(uci_get mesh @network[0] analytics_server "blank")
  case "$host" in
    "blank")
      logger -t meshconfig "No analytics server specified for this network!" && return 2
    ;;
    *)
      grep -qs collectd_network /etc/config/luci_statistics || $DEBUG uci_add luci_statistics statistics collectd_network 
      $DEBUG uci_set luci_statistics collectd_network enable 1
      grep -qs collectd_network_server /etc/config/luci_statistics || $DEBUG uci_add luci_statistics collectd_network_server 
      $DEBUG uci_set luci_statistics @collectd_network_server[0] host "$host"
      $DEBUG uci_set luci_statistics @collectd_network_server[0] port "$(uci_get mesh @network[0] analytics_port 25826)"
    ;;
  esac
  grep -qs commotion_config /etc/config/luci_statistics || $DEBUG uci_add luci_statistics commotion_config 
  $DEBUG uci_set luci_statistics @commotion_config[0] reset 0
  $DEBUG uci_commit luci_statistics
}

apply_vpn_defaults() {
  [ -f /etc/config/n2n ] || logger -t meshconfig "N2N not installed!"
  local host=$(uci_get mesh @network[0] vpn_server "blank")
  case "$host" in
    "blank")
      logger -t meshconfig "No VPN server specified for this network!" && return 2
    ;;
    *)
      grep -qs edge /etc/config/n2n || $DEBUG uci_add n2n edge 
      local mac=$(uci_get wireless @wifi-device[0] macaddr 0)
      [ $mac = 0 ] && \
      logger -t meshconfig "Error! Could not get MAC from config file."
      $DEBUG uci_set n2n @edge[0] ipaddr $( echo $mac | \
      awk -v p="$(uci_get mesh @network[0] vpn_prefix 10)" -F ':' '{ printf(p".%d.%d.%d","0x"$4,"0x"$5,"0x"$6) }' )
      $DEBUG uci_set n2n @edge[0] netmask "255.0.0.0"
      $DEBUG uci_set n2n @edge[0] supernode "$host"
      $DEBUG uci_set n2n @edge[0] port "$(uci_get mesh @network[0] vpn_port 7654)"
      $DEBUG uci_set n2n @edge[0] community "$(uci_get system @system[0] community "default")"
      $DEBUG uci_set n2n @edge[0] key "$(uci_get mesh @network[0] vpn_key "c0MM0t10N!r0ckS!")"
      $DEBUG uci_set n2n @edge[0] route "$(uci_get mesh @network[0] vpn_route "0")"
    ;;
  esac
  grep -qs commotion_config /etc/config/n2n || $DEBUG uci_add n2n commotion_config 
  $DEBUG uci_set n2n @commotion_config[0] reset 0
  $DEBUG uci_commit n2n
}

boot() {
  grep -qs config /etc/config/mesh || { 
    $DEBUG apply_mesh_defaults "$(uci_get system @system[0] community "default")" "$(uci_get system @system[0] role "default")"
    logger -t meshconfig "Applied mesh defaults."
  }

  case "$(uci_get wireless @wifi-device[0] disabled 1)" in
    1)
      case "$(uci_get wireless @wifi-iface[0] ssid "OpenWrt")" in
        "OpenWrt")
          rm -f /etc/config/wireless
          $DEBUG /sbin/wifi detect > /etc/config/wireless
          $DEBUG apply_wireless_defaults
          logger -t meshconfig "Applied wireless defaults."
        ;;
      esac
    ;;
  esac

  case "$(uci_get system @system[0] nodeid "blank")" in
    "blank")
      local getid=$(uci_get mesh @network[0] idgen "default")
      local id=$(get_id_"$getid")
      $DEBUG uci_set system @system[0] nodeid "$id"
      logger -t meshconfig "Generated Node ID $id via method $getid"
    ;;
  esac
  
  [ "$(uci_get luci_statistics @commotion_config[0] reset 1)" = "0" ] && [ "$(uci_get mesh @network[0] analytics_enable 0)" = "1" ] || { 
    apply_analytics_defaults
    logger -t meshconfig "Applied analytics defaults"
  }
  
  [ "$(uci_get n2n @commotion_config[0] reset 1)" = "0" ] && [ "$(uci_get mesh @network[0] vpn_enable 0)" = "1" ] || { 
    apply_vpn_defaults
    logger -t meshconfig "Applied VPN defaults"
  }

  echo "$(uci_get mesh @network[0] olsrd_key "c0mm0t10N!r0cks!")" > /etc/olsrd.d/olsrd_secure_key
  logger -t meshconfig "Applied OLSRd secure key"

  case "$(uci_get system @system[0] homepage "blank")" in
    "blank")
      local homepage=$(uci_get mesh @network[0] homepage "http://commotionwireless.net")
      $DEBUG uci_set system @system[0] homepage "$homepage"
      $DEBUG uci_set luci_splash general homepage "$homepage"
      logger -t meshconfig "Applied homepage defaults."
    ;;
  esac
 
  case "$(uci_get system @system[0] hostname "OpenWrt")" in
    "OpenWrt")
      $DEBUG apply_hostname_defaults "$(uci_get wireless @wifi-device[0] macaddr)"
      logger -t meshconfig "Applied hostname defaults."
    ;;
  esac
}

start() {
  boot
}   

restart() {
  trap '' TERM
  stop "$@"

  config_cb() {
    local type="$1"
    local name="$2"

    case "$type" in
      "interface")
        case "$(uci_get network "$name" proto)" in
          meshif)
            $DEBUG uci_set network "$name" reset 1
            ;;
          apif)
            $DEBUG uci_set network "$name" reset 1
            ;;
        esac
      ;;
    esac
  }
  config_load network
  $DEBUG uci_commit network

  $DEBUG apply_hostname_defaults "$(uci_get wireless @wifi-device[0] macaddr)"

  start "$@"
}

configure() {
  $DEBUG apply_mesh_defaults "$1" "$2"
}

upgrade() {
  local args
  [ -z "$(uci_get system @upgrade[0] noverify 0)" ] || append args "-v"
  [ -z "$(uci_get system @upgrade[0] nobackup 0)" ] || append args "-n"
  $DEBUG remote-update "$args" && return 0
}

cron() {
  ( ps w | grep -q "^\ *$(cat /var/run/olsrd.pid)" || [ ! -h /etc/rc.d/S[0-9]*olsrd ] ) || /etc/init.d/olsrd restart
  ( ps w | grep -q "^\ *$(cat /var/run/dnsmasq.pid)" || [ ! -h /etc/rc.d/S[0-9]*dnsmasq ] ) || /etc/init.d/dnsmasq restart
  [ -z "$(uci_get system @upgrade[0] noverify 0)" ] || upgrade
  return 0
} 
  
